(()=>{"use strict";var n,e,t,r,o,a,i,c,d,l,s,u,p,A,m,f,h={28:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(15),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"#navbar {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\n    grid-template-rows: 1fr;\n    background-color: #424547;\n    text-align: center;\n    width: 50%;\n    margin: 0 auto;\n    padding: 0 500px 0 500px;\n  }\n  \n  #title {\n    color: white;\n  }\n  \n  #sushi {\n    border-radius: 50%;\n    width: 200px;\n    height: 200px;\n  }\n  \n  #home {\n    text-align: center;\n    margin-top: 40px;\n  }\n  \n  #menu {\n    text-align: center;\n    margin-top: 40px;\n  }\n  \n  #descrip {\n    width: 40%;\n    margin: 0 auto;\n  }\n  form {\n    text-align: center;\n    margin-top: 40px;\n  }\n  button {\n    -webkit-appearance: none;\n      -moz-appearance: none;\n      border: none;\n      background-color: #424547;\n      color: white;\n  }\n  \n  button:hover {\n    color: red;\n  }\n  \n  body {\n    margin: 0%;\n  }\n  \n  footer {\n      position: fixed;\n      left: 0;\n      bottom: 0;\n      width: 100%;\n      background-color: #424547;\n      color: white;\n      text-align: center;\n      font-size: 10px;\n  }\n  ","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,0CAA0C;IAC1C,uBAAuB;IACvB,yBAAyB;IACzB,kBAAkB;IAClB,UAAU;IACV,cAAc;IACd,wBAAwB;EAC1B;;EAEA;IACE,YAAY;EACd;;EAEA;IACE,kBAAkB;IAClB,YAAY;IACZ,aAAa;EACf;;EAEA;IACE,kBAAkB;IAClB,gBAAgB;EAClB;;EAEA;IACE,kBAAkB;IAClB,gBAAgB;EAClB;;EAEA;IACE,UAAU;IACV,cAAc;EAChB;EACA;IACE,kBAAkB;IAClB,gBAAgB;EAClB;EACA;IACE,wBAAwB;MACtB,qBAAqB;MACrB,YAAY;MACZ,yBAAyB;MACzB,YAAY;EAChB;;EAEA;IACE,UAAU;EACZ;;EAEA;IACE,UAAU;EACZ;;EAEA;MACI,eAAe;MACf,OAAO;MACP,SAAS;MACT,WAAW;MACX,yBAAyB;MACzB,YAAY;MACZ,kBAAkB;MAClB,eAAe;EACnB",sourcesContent:["#navbar {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\n    grid-template-rows: 1fr;\n    background-color: #424547;\n    text-align: center;\n    width: 50%;\n    margin: 0 auto;\n    padding: 0 500px 0 500px;\n  }\n  \n  #title {\n    color: white;\n  }\n  \n  #sushi {\n    border-radius: 50%;\n    width: 200px;\n    height: 200px;\n  }\n  \n  #home {\n    text-align: center;\n    margin-top: 40px;\n  }\n  \n  #menu {\n    text-align: center;\n    margin-top: 40px;\n  }\n  \n  #descrip {\n    width: 40%;\n    margin: 0 auto;\n  }\n  form {\n    text-align: center;\n    margin-top: 40px;\n  }\n  button {\n    -webkit-appearance: none;\n      -moz-appearance: none;\n      border: none;\n      background-color: #424547;\n      color: white;\n  }\n  \n  button:hover {\n    color: red;\n  }\n  \n  body {\n    margin: 0%;\n  }\n  \n  footer {\n      position: fixed;\n      left: 0;\n      bottom: 0;\n      width: 100%;\n      background-color: #424547;\n      color: white;\n      text-align: center;\n      font-size: 10px;\n  }\n  "],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);r&&o[d[0]]||(t&&(d[2]?d[2]="".concat(t," and ").concat(d[2]):d[2]=t),e.push(d))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,o=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,a=[],i=!0,c=!1;try{for(t=t.call(n);!(i=(r=t.next()).done)&&(a.push(r.value),!e||a.length!==e);i=!0);}catch(n){c=!0,o=n}finally{try{i||null==t.return||t.return()}finally{if(c)throw o}}return a}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if(!i)return a;if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),d="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),l="/*# ".concat(d," */"),s=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[a].concat(s).concat([l]).join("\n")}return[a].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],c=0;c<n.length;c++){var d=n[c],l=r.base?d[0]+r.base:d[0],s=a[l]||0,u="".concat(l," ").concat(s);a[l]=s+1;var p=t(u),A={css:d[1],media:d[2],sourceMap:d[3]};-1!==p?(e[p].references++,e[p].updater(A)):e.push({identifier:u,updater:o(A,r),references:1}),i.push(u)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=t(a[i]);e[c].references--}for(var d=r(n,o),l=0;l<a.length;l++){var s=t(a[l]);0===e[s].references&&(e[s].updater(),e.splice(s,1))}a=d}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r=t.css,o=t.media,a=t.sourceMap;o?n.setAttribute("media",o):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},83:(n,e,t)=>{t.d(e,{Z:()=>r});const r=function(){const n=document.createElement("div");n.id="menu";const e=document.createElement("h1");n.appendChild(e),e.textContent+="What is Omakase?";const t=document.createElement("h3");return t.id="descrip",t.textContent+="Omakase is a Japanese phrase, used when ordering food in restaurants, that means I'll leave it up to you. The chef will prepare and serve you the seasonal menu regardless if you want it or not, even the sea urchin.",n.appendChild(t),n}},630:(n,e,t)=>{t.d(e,{Z:()=>r});const r=function(){const n=document.createElement("div");n.id="reservation";const e=document.createElement("form");n.appendChild(e);const t=document.createElement("label"),r=document.createElement("label"),o=document.createElement("label"),a=document.createElement("input"),i=document.createElement("input"),c=document.createElement("input");return a.type="text",i.type="text",c.type="date",t.innerHTML="First Name",r.innerHTML="Last Name",o.innerHTML="Date",e.appendChild(t),e.appendChild(a),e.appendChild(r),e.appendChild(i),e.appendChild(o),e.appendChild(c),n}}},C={};function E(n){var e=C[n];if(void 0!==e)return e.exports;var t=C[n]={id:n,exports:{}};return h[n](t,t.exports,E),t.exports}E.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return E.d(e,{a:e}),e},E.d=(n,e)=>{for(var t in e)E.o(e,t)&&!E.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},E.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),n=E(630),e=E(83),t=E(379),r=E.n(t),o=E(795),a=E.n(o),i=E(569),c=E.n(i),d=E(565),l=E.n(d),s=E(216),u=E.n(s),p=E(589),A=E.n(p),m=E(28),(f={}).styleTagTransform=A(),f.setAttributes=l(),f.insert=c().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=u(),r()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals,window.addEventListener("load",(t=>{const r=document.createElement("div");document.body.appendChild(r),r.id="navbar";const o=document.createElement("h1");r.appendChild(o),o.id="title",o.innerHTML="MK's Sushi";const a=document.createElement("button"),i=document.createElement("button"),c=document.createElement("button");a.id="btn-home",i.id="btn-menu",c.id="btn-reservation",a.innerHTML="Home",i.innerHTML="Menu",c.innerHTML="Reservations",r.appendChild(a),r.appendChild(i),r.appendChild(c);const d=document.createElement("div");document.body.append(d);const l=document.createElement("div");l.id="home",d.appendChild(l);const s=document.createElement("h1");s.textContent+="Artisan omakase, made fresh",l.appendChild(s);const u=document.createElement("h2");u.textContent+="Hand crafted by master chefs",l.appendChild(u);const p=document.createElement("footer"),A=document.createElement("h2");A.textContent+="sushi@gmail.com | 264.569.4315 | 321 Market St. San Francisco, CA 94901",document.body.appendChild(p),p.appendChild(A),a.addEventListener("click",(n=>{d.innerHTML="";const e=document.createElement("div");e.id="home",d.appendChild(e);const t=document.createElement("h1");t.textContent+="Artisan omakase, made fresh",e.appendChild(t);const r=document.createElement("h2");r.textContent+="Hand crafted by master chefs",e.appendChild(r)})),i.addEventListener("click",(n=>{d.innerHTML="",d.appendChild((0,e.Z)())})),c.addEventListener("click",(e=>{d.innerHTML="",d.appendChild((0,n.Z)())}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,